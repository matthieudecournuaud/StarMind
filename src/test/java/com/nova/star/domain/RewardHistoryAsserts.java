package com.nova.star.domain;

import static com.nova.star.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class RewardHistoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRewardHistoryAllPropertiesEquals(RewardHistory expected, RewardHistory actual) {
        assertRewardHistoryAutoGeneratedPropertiesEquals(expected, actual);
        assertRewardHistoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRewardHistoryAllUpdatablePropertiesEquals(RewardHistory expected, RewardHistory actual) {
        assertRewardHistoryUpdatableFieldsEquals(expected, actual);
        assertRewardHistoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRewardHistoryAutoGeneratedPropertiesEquals(RewardHistory expected, RewardHistory actual) {
        assertThat(expected)
            .as("Verify RewardHistory auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRewardHistoryUpdatableFieldsEquals(RewardHistory expected, RewardHistory actual) {
        assertThat(expected)
            .as("Verify RewardHistory relevant properties")
            .satisfies(e -> assertThat(e.getAction()).as("check action").isEqualTo(actual.getAction()))
            .satisfies(e ->
                assertThat(e.getActionDate())
                    .as("check actionDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getActionDate())
            )
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRewardHistoryUpdatableRelationshipsEquals(RewardHistory expected, RewardHistory actual) {
        assertThat(expected)
            .as("Verify RewardHistory relationships")
            .satisfies(e -> assertThat(e.getReward()).as("check reward").isEqualTo(actual.getReward()))
            .satisfies(e -> assertThat(e.getIdea()).as("check idea").isEqualTo(actual.getIdea()));
    }
}
